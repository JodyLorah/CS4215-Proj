import * as es from 'estree';
import { RuntimeSourceError } from '../errors/runtimeSourceError';
import { Chapter, ErrorSeverity, ErrorType } from '../types';
export declare class TypeError extends RuntimeSourceError {
    side: string;
    expected: string;
    got: string;
    chapter: Chapter;
    type: ErrorType;
    severity: ErrorSeverity;
    location: es.SourceLocation;
    constructor(node: es.Node, side: string, expected: string, got: string, chapter?: Chapter);
    explain(): string;
    elaborate(): string;
}
export declare const checkUnaryExpression: (node: es.AssignmentProperty | es.Property | es.CatchClause | es.ClassDeclaration | es.ClassExpression | es.ClassBody | es.ArrayExpression | es.ArrowFunctionExpression | es.AssignmentExpression | es.AwaitExpression | es.BinaryExpression | es.SimpleCallExpression | es.NewExpression | es.ChainExpression | es.ConditionalExpression | es.FunctionExpression | es.Identifier | es.ImportExpression | es.SimpleLiteral | es.RegExpLiteral | es.BigIntLiteral | es.LogicalExpression | es.MemberExpression | es.MetaProperty | es.ObjectExpression | es.SequenceExpression | es.TaggedTemplateExpression | es.TemplateLiteral | es.ThisExpression | es.UnaryExpression | es.UpdateExpression | es.YieldExpression | es.FunctionDeclaration | es.MethodDefinition | es.ImportDeclaration | es.ExportNamedDeclaration | es.ExportDefaultDeclaration | es.ExportAllDeclaration | es.ImportSpecifier | es.ImportDefaultSpecifier | es.ImportNamespaceSpecifier | es.ExportSpecifier | es.ObjectPattern | es.ArrayPattern | es.RestElement | es.AssignmentPattern | es.PrivateIdentifier | es.Program | es.PropertyDefinition | es.SpreadElement | es.ExpressionStatement | es.BlockStatement | es.StaticBlock | es.EmptyStatement | es.DebuggerStatement | es.WithStatement | es.ReturnStatement | es.LabeledStatement | es.BreakStatement | es.ContinueStatement | es.IfStatement | es.SwitchStatement | es.ThrowStatement | es.TryStatement | es.WhileStatement | es.DoWhileStatement | es.ForStatement | es.ForInStatement | es.ForOfStatement | es.VariableDeclaration | es.Super | es.SwitchCase | es.TemplateElement | es.VariableDeclarator, operator: es.UnaryOperator, value: any, chapter?: Chapter) => TypeError | undefined;
export declare const checkBinaryExpression: (node: es.AssignmentProperty | es.Property | es.CatchClause | es.ClassDeclaration | es.ClassExpression | es.ClassBody | es.ArrayExpression | es.ArrowFunctionExpression | es.AssignmentExpression | es.AwaitExpression | es.BinaryExpression | es.SimpleCallExpression | es.NewExpression | es.ChainExpression | es.ConditionalExpression | es.FunctionExpression | es.Identifier | es.ImportExpression | es.SimpleLiteral | es.RegExpLiteral | es.BigIntLiteral | es.LogicalExpression | es.MemberExpression | es.MetaProperty | es.ObjectExpression | es.SequenceExpression | es.TaggedTemplateExpression | es.TemplateLiteral | es.ThisExpression | es.UnaryExpression | es.UpdateExpression | es.YieldExpression | es.FunctionDeclaration | es.MethodDefinition | es.ImportDeclaration | es.ExportNamedDeclaration | es.ExportDefaultDeclaration | es.ExportAllDeclaration | es.ImportSpecifier | es.ImportDefaultSpecifier | es.ImportNamespaceSpecifier | es.ExportSpecifier | es.ObjectPattern | es.ArrayPattern | es.RestElement | es.AssignmentPattern | es.PrivateIdentifier | es.Program | es.PropertyDefinition | es.SpreadElement | es.ExpressionStatement | es.BlockStatement | es.StaticBlock | es.EmptyStatement | es.DebuggerStatement | es.WithStatement | es.ReturnStatement | es.LabeledStatement | es.BreakStatement | es.ContinueStatement | es.IfStatement | es.SwitchStatement | es.ThrowStatement | es.TryStatement | es.WhileStatement | es.DoWhileStatement | es.ForStatement | es.ForInStatement | es.ForOfStatement | es.VariableDeclaration | es.Super | es.SwitchCase | es.TemplateElement | es.VariableDeclarator, operator: es.BinaryOperator, chapter: Chapter, left: any, right: any) => TypeError | undefined;
export declare const checkIfStatement: (node: es.AssignmentProperty | es.Property | es.CatchClause | es.ClassDeclaration | es.ClassExpression | es.ClassBody | es.ArrayExpression | es.ArrowFunctionExpression | es.AssignmentExpression | es.AwaitExpression | es.BinaryExpression | es.SimpleCallExpression | es.NewExpression | es.ChainExpression | es.ConditionalExpression | es.FunctionExpression | es.Identifier | es.ImportExpression | es.SimpleLiteral | es.RegExpLiteral | es.BigIntLiteral | es.LogicalExpression | es.MemberExpression | es.MetaProperty | es.ObjectExpression | es.SequenceExpression | es.TaggedTemplateExpression | es.TemplateLiteral | es.ThisExpression | es.UnaryExpression | es.UpdateExpression | es.YieldExpression | es.FunctionDeclaration | es.MethodDefinition | es.ImportDeclaration | es.ExportNamedDeclaration | es.ExportDefaultDeclaration | es.ExportAllDeclaration | es.ImportSpecifier | es.ImportDefaultSpecifier | es.ImportNamespaceSpecifier | es.ExportSpecifier | es.ObjectPattern | es.ArrayPattern | es.RestElement | es.AssignmentPattern | es.PrivateIdentifier | es.Program | es.PropertyDefinition | es.SpreadElement | es.ExpressionStatement | es.BlockStatement | es.StaticBlock | es.EmptyStatement | es.DebuggerStatement | es.WithStatement | es.ReturnStatement | es.LabeledStatement | es.BreakStatement | es.ContinueStatement | es.IfStatement | es.SwitchStatement | es.ThrowStatement | es.TryStatement | es.WhileStatement | es.DoWhileStatement | es.ForStatement | es.ForInStatement | es.ForOfStatement | es.VariableDeclaration | es.Super | es.SwitchCase | es.TemplateElement | es.VariableDeclarator, test: any, chapter?: Chapter) => TypeError | undefined;
export declare const checkMemberAccess: (node: es.AssignmentProperty | es.Property | es.CatchClause | es.ClassDeclaration | es.ClassExpression | es.ClassBody | es.ArrayExpression | es.ArrowFunctionExpression | es.AssignmentExpression | es.AwaitExpression | es.BinaryExpression | es.SimpleCallExpression | es.NewExpression | es.ChainExpression | es.ConditionalExpression | es.FunctionExpression | es.Identifier | es.ImportExpression | es.SimpleLiteral | es.RegExpLiteral | es.BigIntLiteral | es.LogicalExpression | es.MemberExpression | es.MetaProperty | es.ObjectExpression | es.SequenceExpression | es.TaggedTemplateExpression | es.TemplateLiteral | es.ThisExpression | es.UnaryExpression | es.UpdateExpression | es.YieldExpression | es.FunctionDeclaration | es.MethodDefinition | es.ImportDeclaration | es.ExportNamedDeclaration | es.ExportDefaultDeclaration | es.ExportAllDeclaration | es.ImportSpecifier | es.ImportDefaultSpecifier | es.ImportNamespaceSpecifier | es.ExportSpecifier | es.ObjectPattern | es.ArrayPattern | es.RestElement | es.AssignmentPattern | es.PrivateIdentifier | es.Program | es.PropertyDefinition | es.SpreadElement | es.ExpressionStatement | es.BlockStatement | es.StaticBlock | es.EmptyStatement | es.DebuggerStatement | es.WithStatement | es.ReturnStatement | es.LabeledStatement | es.BreakStatement | es.ContinueStatement | es.IfStatement | es.SwitchStatement | es.ThrowStatement | es.TryStatement | es.WhileStatement | es.DoWhileStatement | es.ForStatement | es.ForInStatement | es.ForOfStatement | es.VariableDeclaration | es.Super | es.SwitchCase | es.TemplateElement | es.VariableDeclarator, obj: any, prop: any) => TypeError | undefined;
export declare const isIdentifier: (node: any) => node is es.Identifier;
